#version 400 core
in vec3 position;
in vec2 texcoords;
in vec3 normals;
out vec2 pass_texcoords; 
out vec3 surfaceNormal;
out vec3 toLight[4];
out vec3 toCamera;
out float visibility;
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];
const float density=0.003;
const float gradient=5.4;
void main(void){
vec4 worldPosition=transformationMatrix*vec4(position,1.0);
vec4 relCamPosition=viewMatrix*worldPosition;
gl_Position=projectionMatrix*viewMatrix*worldPosition;
pass_texcoords=texcoords;
surfaceNormal=(transformationMatrix*vec4(normals,0.0)).xyz;
for(int i=0;i<4;++i){
toLight[i]= lightPosition[i]-worldPosition.xyz;
}
toCamera=(inverse(viewMatrix)*vec4(0,0,0,1)).xyz-worldPosition.xyz;
float distance=length(relCamPosition.xyz);
visibility=exp(-pow(distance*density,gradient));
visibility=clamp(visibility,0,1);
}